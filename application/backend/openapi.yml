openapi: 3.0.3
info:
  title: Gold Waves Recommender API
  version: 1.0.0
  description: >
    API para recomendación Investor → Project sobre Neo4j + GDS.
    Pensada para consumo por SPA (frontend) y panel admin.
servers:
  - url: http://localhost:8080
    description: Local dev

tags:
  - name: Auth
  - name: Investors
  - name: Projects
  - name: Recommendations
  - name: Tags
  - name: GDS Jobs
  - name: Scoring
  - name: User Actions
  - name: Ops

paths:

  /auth/login:
    post:
      tags: [Auth]
      summary: Login con credenciales y emisión de JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username: { type: string, example: ana.garcia@example.com }
                password: { type: string, format: password }
      responses:
        '200':
          description: Token emitido
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: { type: string }
                  token_type: { type: string, example: Bearer }
                  expires_in: { type: integer, example: 3600 }
                  investor_id: { type: string, nullable: true, example: inv-1 }
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Refrescar JWT
      responses:
        '200':
          description: Token renovado
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: { type: string }
                  token_type: { type: string, example: Bearer }
                  expires_in: { type: integer, example: 3600 }

  /investors/{id}:
    get:
      security: [{ bearerAuth: [] }]
      tags: [Investors]
      summary: Obtener perfil de inversor
      parameters:
        - $ref: '#/components/parameters/InvestorId'
      responses:
        '200':
          description: Perfil
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Investor' }
    put:
      security: [{ bearerAuth: [] }]
      tags: [Investors]
      summary: Crear/actualizar perfil de inversor
      parameters:
        - $ref: '#/components/parameters/InvestorId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvestorUpdate'
      responses:
        '200':
          description: Perfil actualizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Investor' }

  /investors/{id}/interactions:
    post:
      security: [{ bearerAuth: [] }]
      tags: [Investors]
      summary: Registrar interacción del inversor con un proyecto
      parameters:
        - $ref: '#/components/parameters/InvestorId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Interaction'
      responses:
        '201':
          description: Interacción registrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Interaction' }

  /projects:
    get:
      security: [{ bearerAuth: [] }]
      tags: [Projects]
      summary: Listado/búsqueda de proyectos
      parameters:
        - in: query
          name: country
          schema: { type: string, example: ES }
        - in: query
          name: city
          schema: { type: string, example: Madrid }
        - in: query
          name: type
          schema: { type: string, example: office }
        - in: query
          name: min_ticket
          schema: { type: number, format: double }
        - in: query
          name: max_ticket
          schema: { type: number, format: double }
        - in: query
          name: esg_min
          schema: { type: number, format: float, minimum: 0, maximum: 1 }
        - in: query
          name: sort
          description: Campo de orden (-desc, +asc). Ej: -irr
          schema: { type: string, example: -irr }
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Lista paginada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectList'

  /projects/{id}:
    get:
      security: [{ bearerAuth: [] }]
      tags: [Projects]
      summary: Detalle de proyecto
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '200':
          description: Proyecto
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Project' }

  /projects/{id}/similar:
    get:
      security: [{ bearerAuth: [] }]
      tags: [Projects]
      summary: Proyectos similares vía KNN
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - in: query
          name: limit
          schema: { type: integer, default: 10, minimum: 1, maximum: 100 }
      responses:
        '200':
          description: Similares
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Project' }

  /recommendations/investors/{id}:
    get:
      security: [{ bearerAuth: [] }]
      tags: [Recommendations]
      summary: Recomendaciones para un inversor
      parameters:
        - $ref: '#/components/parameters/InvestorId'
        - in: query
          name: limit
          schema: { type: integer, default: 20, minimum: 1, maximum: 100 }
        - in: query
          name: offset
          schema: { type: integer, default: 0, minimum: 0 }
        - in: query
          name: fresh
          schema: { type: boolean, default: false }
      responses:
        '200':
          description: Recomendaciones con explicabilidad básica
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendationResponse'

  /recommendations/investors/{id}/projects/{project_id}/explain:
    get:
      security: [{ bearerAuth: [] }]
      tags: [Recommendations]
      summary: Explicabilidad completa de una recomendación
      parameters:
        - $ref: '#/components/parameters/InvestorId'
        - $ref: '#/components/parameters/ProjectIdAlt'
      responses:
        '200':
          description: Desglose de score, reglas y paths
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExplainResponse'

  /recommendations/investors/{id}/projects/{project_id}/feedback:
    post:
      security: [{ bearerAuth: [] }]
      tags: [Recommendations]
      summary: Feedback del usuario sobre una recomendación
      parameters:
        - $ref: '#/components/parameters/InvestorId'
        - $ref: '#/components/parameters/ProjectIdAlt'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [signal]
              properties:
                signal:
                  type: string
                  enum: [thumbs_up, thumbs_down, favorite, not_relevant]
                weight: { type: number, format: float, default: 1.0 }
                comment: { type: string }
      responses:
        '201':
          description: Feedback guardado

  /tags:
    get:
      security: [{ bearerAuth: [] }]
      tags: [Tags]
      summary: Listar tags por tipología
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum: [use_case, risk, esg, amenity]
      responses:
        '200':
          description: Tags
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Tag' }

  /projects/{id}/suggested-tags:
    get:
      security: [{ bearerAuth: [] }]
      tags: [Tags]
      summary: Sugerencia de etiquetas para un proyecto
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '200':
          description: Tags sugeridos
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Tag' }

  /jobs/gds/rebuild:
    post:
      security: [{ bearerAuth: [] }]
      tags: [GDS Jobs]
      summary: Reproyectar grafo y recalcular embeddings/KNN
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/JobRequest' }
      responses:
        '202':
          description: Job lanzado
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/JobStatus' }

  /jobs/{job_id}:
    get:
      security: [{ bearerAuth: [] }]
      tags: [GDS Jobs]
      summary: Estado de un job
      parameters:
        - in: path
          name: job_id
          required: true
          schema: { type: string, example: job-abc-123 }
      responses:
        '200':
          description: Estado
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/JobStatus' }

  /scoring/weights:
    get:
      security: [{ bearerAuth: [] }]
      tags: [Scoring]
      summary: Obtener pesos globales de scoring
      responses:
        '200':
          description: Pesos
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/ScoringWeights' }
    put:
      security: [{ bearerAuth: [] }]
      tags: [Scoring]
      summary: Actualizar pesos globales o por segmento
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ScoringWeights' }
      responses:
        '200':
          description: Actualizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/ScoringWeights' }

  /scoring/preview:
    post:
      security: [{ bearerAuth: [] }]
      tags: [Scoring]
      summary: Previsualizar score para un par investor-project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [investor_id, project_id]
              properties:
                investor_id: { type: string, example: inv-1 }
                project_id: { type: string, example: proj-789 }
      responses:
        '200':
          description: Desglose de score
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExplainResponse'

  /investors/{id}/favorites:
    post:
      security: [{ bearerAuth: [] }]
      tags: [User Actions]
      summary: Añadir favorito
      parameters:
        - $ref: '#/components/parameters/InvestorId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [project_id]
              properties:
                project_id: { type: string }
      responses:
        '201':
          description: Favorito guardado

  /investors/{id}/favorites/{project_id}:
    delete:
      security: [{ bearerAuth: [] }]
      tags: [User Actions]
      summary: Eliminar favorito
      parameters:
        - $ref: '#/components/parameters/InvestorId'
        - $ref: '#/components/parameters/ProjectIdAlt'
      responses:
        '204':
          description: Eliminado

  /projects/{id}/request-info:
    post:
      security: [{ bearerAuth: [] }]
      tags: [User Actions]
      summary: Solicitar información al sponsor
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '201':
          description: Lead creado

  /investors/{id}/history:
    get:
      security: [{ bearerAuth: [] }]
      tags: [User Actions]
      summary: Historial de interacciones
      parameters:
        - $ref: '#/components/parameters/InvestorId'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Historial
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Interaction' }

  /health:
    get:
      tags: [Ops]
      summary: Salud del servicio
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  neo4j: { type: string, example: up }
                  gds: { type: string, example: up }
                  queue: { type: string, example: up }
                  latency_ms: { type: integer, example: 42 }

  /stats:
    get:
      security: [{ bearerAuth: [] }]
      tags: [Ops]
      summary: Métricas de producto
      responses:
        '200':
          description: KPIs
          content:
            application/json:
              schema:
                type: object
                properties:
                  ctr: { type: number, format: float, example: 0.21 }
                  conversion_request_info: { type: number, format: float, example: 0.07 }
                  embeddings_coverage: { type: number, format: float, example: 0.98 }

components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    InvestorId:
      in: path
      name: id
      required: true
      schema: { type: string, example: inv-1 }
    ProjectId:
      in: path
      name: id
      required: true
      schema: { type: string, example: proj-789 }
    ProjectIdAlt:
      in: path
      name: project_id
      required: true
      schema: { type: string, example: proj-789 }
    Page:
      in: query
      name: page
      schema: { type: integer, default: 1, minimum: 1 }
    Limit:
      in: query
      name: limit
      schema: { type: integer, default: 20, minimum: 1, maximum: 100 }

  responses:
    Unauthorized:
      description: No autorizado
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

  schemas:

    Error:
      type: object
      properties:
        error: { type: string }
        message: { type: string }

    Meta:
      type: object
      properties:
        page: { type: integer }
        limit: { type: integer }
        total: { type: integer }
        offset: { type: integer }
        generated_at: { type: string, format: date-time }

    Investor:
      type: object
      properties:
        id: { type: string }
        segment:
          type: string
          enum: [retail, professional, institution]
        risk_profile:
          type: string
          enum: [conservative, moderate, aggressive]
        horizon:
          type: string
          enum: [short, medium, long]
        ticket_min: { type: number, format: double }
        ticket_max: { type: number, format: double }
        jurisdictions_ok:
          type: array
          items: { type: string }
        cities_pref:
          type: array
          items: { type: string }
        esg_pref: { type: number, format: float, minimum: 0, maximum: 1 }
        tags:
          type: array
          items: { type: string }
        embedding:
          type: array
          items: { type: number }
          description: Puede omitirse en respuestas públicas

    InvestorUpdate:
      allOf:
        - $ref: '#/components/schemas/Investor'
      required: [segment, risk_profile, horizon, ticket_min, ticket_max]

    Project:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        type: { type: string, example: office }
        country: { type: string, example: ES }
        city: { type: string, example: Madrid }
        lat: { type: number, format: double }
        lon: { type: number, format: double }
        irr: { type: number, format: float, example: 0.15 }
        cap_rate: { type: number, format: float, example: 0.055 }
        min_ticket: { type: number, format: double }
        max_ticket: { type: number, format: double }
        esg: { type: string, example: LEED }
        sponsor_id: { type: string }
        tags:
          type: array
          items: { type: string }
        documents:
          type: array
          items:
            type: object
            properties:
              name: { type: string }
              url: { type: string }
        embedding:
          type: array
          items: { type: number }

    Interaction:
      type: object
      required: [project_id, type]
      properties:
        project_id: { type: string, example: proj-123 }
        type:
          type: string
          enum: [view, click, download, favorite, request_info, investment, thumbs_up, thumbs_down]
        weight: { type: number, format: float, default: 1.0 }
        context:
          type: object
          additionalProperties: true
          example: { source: "feed", position: 3 }
        created_at:
          type: string
          format: date-time

    Tag:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        type: { type: string, enum: [use_case, risk, esg, amenity] }

    ScoreComponents:
      type: object
      properties:
        embedding_sim: { type: number, format: float }
        rules_score: { type: number, format: float }
        behavioral_boost: { type: number, format: float }

    RecommendationItem:
      type: object
      properties:
        project_id: { type: string }
        score_total: { type: number, format: float }
        components: { $ref: '#/components/schemas/ScoreComponents' }
        why:
          type: array
          items: { type: string }

    RecommendationResponse:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/RecommendationItem' }
        meta:
          $ref: '#/components/schemas/Meta'

    ExplainResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            score_total: { type: number, format: float }
            components: { $ref: '#/components/schemas/ScoreComponents' }
            rules_contributions:
              type: array
              items:
                type: object
                properties:
                  rule: { type: string }
                  delta: { type: number, format: float }
            graph_paths:
              type: array
              items:
                type: object
                properties:
                  path: { type: string }
                  weight: { type: number, format: float }
            features_top:
              type: array
              items:
                type: object
                properties:
                  feature: { type: string }
                  importance: { type: number, format: float }

    JobRequest:
      type: object
      properties:
        pipeline:
          type: object
          properties:
            graph_name: { type: string, example: marketGraph }
            projection:
              type: object
              properties:
                nodeLabels:
                  type: array
                  items: { type: string }
                relationshipTypes:
                  type: array
                  items: { type: string }
            fastrp:
              type: object
              properties:
                embeddingDimension: { type: integer, example: 256 }
                iterationWeights:
                  type: array
                  items: { type: number, format: float }
                featureProperties:
                  type: array
                  items: { type: string }
            knn:
              type: object
              properties:
                topK: { type: integer, example: 25 }
                similarityCutoff: { type: number, format: float, example: 0.0 }
                writeRelationshipType: { type: string, example: SIMILAR_TO }
                writeProperty: { type: string, example: score }

    JobStatus:
      type: object
      properties:
        job_id: { type: string }
        status: { type: string, enum: [queued, running, succeeded, failed] }
        progress: { type: number, format: float, example: 0.72 }
        logs:
          type: array
          items: { type: string }

    ScoringWeights:
      type: object
      properties:
        alpha: { type: number, format: float, example: 0.7 }
        beta:  { type: number, format: float, example: 0.25 }
        gamma: { type: number, format: float, example: 0.05 }
        segment_overrides:
          type: object
          additionalProperties:
            type: object
            properties:
              alpha: { type: number, format: float }
              beta:  { type: number, format: float }
              gamma: { type: number, format: float }

    PaginatedProjectList:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/Project' }
        meta:
          $ref: '#/components/schemas/Meta'

security:
  - bearerAuth: []